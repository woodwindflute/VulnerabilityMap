// config map
let config = {
  minZoom: 7,
  maxZoom: 10,
};

// 創建地圖
const map = L.map("map", config).setView([23.5, 121], 7);

// 添加地圖底圖
L.tileLayer("https://tile.openstreetmap.org/{z}/{x}/{y}.png", {
  attribution:
    '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
}).addTo(map);

const htmlTemplate =
  '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32"><path d="M32 18.451L16 6.031 0 18.451v-5.064L16 .967l16 12.42zM28 18v12h-8v-8h-8v8H4V18l12-9z" /></svg>';

// create custom button
const customControl = L.Control.extend({
  // button position
  options: {
    position: "topleft",
  },

  // method
  onAdd: function (map) {
    console.log(map.getCenter());
    // create button
    const btn = L.DomUtil.create("button");
    btn.title = "back to home";
    btn.innerHTML = htmlTemplate;
    btn.className += "leaflet-bar back-to-home hidden";

    return btn;
  },
});

// adding new button to map controll
map.addControl(new customControl());

// on drag end
map.on("moveend", getCenterOfMap);

const buttonBackToHome = document.querySelector(".back-to-home");

function getCenterOfMap() {
  buttonBackToHome.classList.remove("hidden");

  buttonBackToHome.addEventListener("click", () => {
    map.flyTo([lat, lng], zoom);
  });

  map.on("moveend", () => {
    const { lat: latCenter, lng: lngCenter } = map.getCenter();

    const latC = latCenter.toFixed(3) * 1;
    const lngC = lngCenter.toFixed(3) * 1;

    const defaultCoordinate = [+lat.toFixed(3), +lng.toFixed(3)];

    const centerCoordinate = [latC, lngC];

    if (compareToArrays(centerCoordinate, defaultCoordinate)) {
      buttonBackToHome.classList.add("hidden");
    }
  });
}

const compareToArrays = (a, b) => JSON.stringify(a) === JSON.stringify(b);

// Write Your Code!

// 加載行政區地理數據
var geojsonFeature;
var layerGroup;
var geojsonLayer;

fetch("taiwan.geojson")
  .then(response => response.json())
  .then(json => {
    geojsonFeature = json
    layerGroup = L.layerGroup().addTo(map);
    geojsonLayer = L.geoJSON(geojsonFeature, {
      style: defaultStyle
    }).addTo(layerGroup);
  });

// 脆弱性變量
var sexList = [95.03,90.29,97.6,95.97,98.86,96.74,101.06,103.96,106.15,102.94,104.08,106.7,107.53,103.27,104.7,101.59,105.53,99.17,97.41,92.86,98.34,136.92]
var popuList = [1946.61,9126.87,1868.59,1270.70,845.48,924.21,209.49,406.65,293.98,1159.01,116.79,514.47,256.43,287.76,60.47,68.9,845.18,2723.18,4344.33,4380.20,931.68,485.52]
var raiseList = [40.03,50.36,39.45,39.99,41.95,42.16,42.83,41.57,42.7,43.09,43.72,44.31,43.45,41.98,42.55,43.7,39.24,41.13,43.72,43.58,33,31.94]
var incomeMiddle = [65.8,77.4,68.8,64.3,64.9,65.4,62,78.8,64.5,59.9,59,63.1,61.2,61.7,61.5,60.5,74.1,62.2,82.2,65.9,74.2,83.6]
var incomeVar = [18.1,65.6,14.6,27.6,22.8,15.8,11,20,11.6,23.1,13.3,32.1,9.4,10,12.3,9.5,8.8,11.7,23.7,11,9.6,7.5]
var lowShockRes = [28.43,47.51,24.17,25.39,34.22,35.14,35.59,24.19,40.44,42.95,41.89,48.18,47.07,41.93,47.49,43.56,51.86,32.44,23.58,34.12,25.6,51.63]
var shickBed = [14496,19756,11812,18793,9936,17696,3463,3039,3017,7459,3090,3319,3030,5002,1268,4134,501,2375,2390,3519,304,43]
var fireAgency = [2446,1821,1647,1720,1177,1536,342,425,514,707,434,492,432,605,380,370,190,281,302,279,157,48]

// 定義樣式函數
function defaultStyle(feature) {
  return {
    fillColor: '#fffeee',
    weight: 1,
    opacity: 1,
    color: 'black',
    dashArray: '3',
    fillOpacity: 0.7
  };
}

// 定義樣式函數
function turnBlack(feature) {
  // 返回不同行政區的顏色樣式
  var color;
  var opacity;
  var weight;
  if (feature.properties.Cnty_name === '宜蘭縣') {
    color = 'black';
    opacity = 0.5;
  } else{
    color = '#fffeee';
    opacity = 0;
  }
  
  return {
    fillColor: color,
    weight: 0,
    dashArray: '3',
    fillOpacity: opacity
  };
}


// -------- 對外函示 ----------

function changeColor() {
  geojsonLayer = L.geoJSON(geojsonFeature, {
    style: turnBlack
  }).addTo(layerGroup);
}

function resetLayerStyle() {
  layerGroup.clearLayers();
  geojsonLayer = L.geoJSON(geojsonFeature, {
    style: defaultStyle
  }).addTo(layerGroup);
}

function colorGenerate(data) {
  // 色階的起點和終點顏色
  var startColor = "#5e4fa2";
  var endColor = "#9e0042";
  
  // 計算色階中段的顏色
  var middleColor = "#ffffbf";
  
  // 插值函數
  var colorScale = d3.interpolate(startColor, endColor);
  
  // 計算最小值和最大值
  var minValue = Math.min.apply(null, data);
  var maxValue = Math.max.apply(null, data);
  
  // 計算中間值
  var middleValue = minValue + (maxValue - minValue) / 2;
  
  // 將每個數字對應到色階的顏色
  var colorArray = data.map(function(value) {
    if (value === middleValue) {
      return middleColor;
    } else if (value < middleValue) {
      var t = (value - minValue) / (middleValue - minValue);
      return colorScale(t);
    } else {
      var t = (value - middleValue) / (maxValue - middleValue);
      return colorScale(t);
    }
  });
  return colorArray;
}
