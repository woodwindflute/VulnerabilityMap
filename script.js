// config map
let config = {
  minZoom: 7,
  maxZoom: 10,
};
const zoom = 7;
const lat = 23.558700378569874;
const lng = 121.05029983517791;

// 創建地圖
const map = L.map("map", config).setView([lat, lng], zoom);

// 添加地圖底圖
L.tileLayer("https://tile.openstreetmap.org/{z}/{x}/{y}.png", {
  attribution:
    '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
}).addTo(map);

const htmlTemplate =
  '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32"><path d="M32 18.451L16 6.031 0 18.451v-5.064L16 .967l16 12.42zM28 18v12h-8v-8h-8v8H4V18l12-9z" /></svg>';

// create custom button
const customControl = L.Control.extend({
  // button position
  options: {
    position: "topleft",
  },

  // method
  onAdd: function (map) {
    console.log(map.getCenter());
    // create button
    const btn = L.DomUtil.create("button");
    btn.title = "back to home";
    btn.innerHTML = htmlTemplate;
    btn.className += "leaflet-bar back-to-home hidden";

    return btn;
  },
});

// adding new button to map controll
map.addControl(new customControl());

// on drag end
map.on("moveend", getCenterOfMap);

const buttonBackToHome = document.querySelector(".back-to-home");

function getCenterOfMap() {
  buttonBackToHome.classList.remove("hidden");

  buttonBackToHome.addEventListener("click", () => {
    map.flyTo([lat, lng], zoom);
  });

  map.on("moveend", () => {
    const { lat: latCenter, lng: lngCenter } = map.getCenter();

    const latC = latCenter.toFixed(3) * 1;
    const lngC = lngCenter.toFixed(3) * 1;

    const defaultCoordinate = [+lat.toFixed(3), +lng.toFixed(3)];

    const centerCoordinate = [latC, lngC];

    if (compareToArrays(centerCoordinate, defaultCoordinate)) {
      buttonBackToHome.classList.add("hidden");
    }
  });
}

const compareToArrays = (a, b) => JSON.stringify(a) === JSON.stringify(b);

// Write Your Code!

// 加載行政區地理數據
var geojsonFeature;
var layerGroup;
var geojsonLayer;

fetch("taiwan.geojson")
  .then(response => response.json())
  .then(json => {
    geojsonFeature = json
    layerGroup = L.layerGroup().addTo(map);
    geojsonLayer = L.geoJSON(geojsonFeature, {
      style: defaultStyle
    }).addTo(layerGroup);
  });

// 脆弱性變量
var CntyTable = ['65','63','68','66','67','64','02','04','05','07','08','09','10','13','14','15','16','17','18','20','91','92']

var globalList = []

// 定義樣式函數
function defaultStyle(feature) {
  return {
    fillColor: '#ffffee',
    weight: 1,
    opacity: 1,
    color: 'black',
    dashArray: '3',
    fillOpacity: 0.7
  };
}

// 定義樣式函數
function colorAction(feature) {
  // 返回不同行政區的顏色樣式
  var color;
  var colorList = colorGenerate(globalList);
  var index = CntyTable.indexOf(feature.properties.Cnty_code)
  color = colorList[index];
  return {
    fillColor: color,
    weight: 0,
    dashArray: '3',
    fillOpacity: 0.5
  };
}

function colorGenerate(data) {
  // 色階的起點和終點顏色
  var startColor = "#5e4fa2";
  var endColor = "#9e0042";
  
  // 色階中段的顏色
  var middleColor = "#ffffbf";
  
  // 確定色階中位數位置
  var middleIndex = Math.floor(data.length / 2);
  
  // 取得最小值和最大值的索引
  var minValue = { value: Infinity, index: null };
  var maxValue = { value: -Infinity, index: null };
  
  data.forEach(function(value, index) {
    if (value < minValue.value) {
      minValue.value = value;
      minValue.index = index;
    }
    if (value > maxValue.value) {
      maxValue.value = value;
      maxValue.index = index;
    }
  });
  
  // 將 data 陣列重新排序
  var sortedData = data.slice().sort(function(a, b) {
    return a - b;
  });
  
  // 計算每個區域的範圍大小
  var range1 = middleIndex - 1;
  var range2 = data.length - middleIndex;
  
  // 插值函數
  var colorScaleLeft = d3.interpolate(startColor, middleColor);
  var colorScaleRight = d3.interpolate(middleColor, endColor);
  
  // 將每個數字對應到色階的顏色
  var colorArray = sortedData.map(function(value, index) {
    if (index <= range1) {
      var t = index / range1;
      return colorScaleLeft(t);
    } else {
      var t = (index - range1) / range2;
      return colorScaleRight(t);
    }
  });
  
  // 建立對應表
  var indexMap = {};
  sortedData.forEach(function (value, index) {
    indexMap[index] = data.indexOf(value);
  });

  // 將顏色陣列根據原始索引還原到原始順序
  var restoredColors = Array(data.length-1);
  for(var i = 0; i <= data.length; i++) {
    restoredColors[indexMap[i]] = colorArray[i];
  }
  return restoredColors;
}

// -------- 對外函示 ----------

function changeColor(list) {
  globalList = list;
  geojsonLayer = L.geoJSON(geojsonFeature, {
    style: colorAction
  }).addTo(layerGroup);
}

function resetLayerStyle() {
  globalList = [];
  layerGroup.clearLayers();
  geojsonLayer = L.geoJSON(geojsonFeature, {
    style: defaultStyle
  }).addTo(layerGroup);
}

